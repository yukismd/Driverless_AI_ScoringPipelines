#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Row(object):
    """
    An input row to be scored.
    @param x1, x1
    @param x2, x2
    @param x3, x3
    @param x4, x4

    Attributes:
     - x1
     - x2
     - x3
     - x4
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'x1', None, None, ),  # 1
        (2, TType.DOUBLE, 'x2', None, None, ),  # 2
        (3, TType.DOUBLE, 'x3', None, None, ),  # 3
        (4, TType.DOUBLE, 'x4', None, None, ),  # 4
    )

    def __init__(self, x1=None, x2=None, x3=None, x4=None,):
        self.x1 = x1
        self.x2 = x2
        self.x3 = x3
        self.x4 = x4

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.x2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.x3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.x4 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Row')
        if self.x1 is not None:
            oprot.writeFieldBegin('x1', TType.DOUBLE, 1)
            oprot.writeDouble(self.x1)
            oprot.writeFieldEnd()
        if self.x2 is not None:
            oprot.writeFieldBegin('x2', TType.DOUBLE, 2)
            oprot.writeDouble(self.x2)
            oprot.writeFieldEnd()
        if self.x3 is not None:
            oprot.writeFieldBegin('x3', TType.DOUBLE, 3)
            oprot.writeDouble(self.x3)
            oprot.writeFieldEnd()
        if self.x4 is not None:
            oprot.writeFieldBegin('x4', TType.DOUBLE, 4)
            oprot.writeDouble(self.x4)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
